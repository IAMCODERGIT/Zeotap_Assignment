Steps for Weather Monitoring Application:

1.	Backend (Spring Boot - Java)

1.1. Dependencies in pom.xml

<dependencies>
    <!-- Spring Boot Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>

    <!-- Spring Web (for REST API calls) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- MongoDB Driver (optional if using MongoDB) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>

    <!-- RestTemplate for API calls -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
</dependencies>

1.2. Service to Call OpenWeatherMap API

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class WeatherService {
    private final String API_KEY = "your_openweathermap_api_key";
    private final String BASE_URL = "http://api.openweathermap.org/data/2.5/weather?q=";

    public WeatherData getWeather(String city) {
        RestTemplate restTemplate = new RestTemplate();
        String url = BASE_URL + city + "&appid=" + API_KEY;
        return restTemplate.getForObject(url, WeatherData.class);
    }

    // Convert Kelvin to Celsius
    public double convertToCelsius(double kelvinTemp) {
        return kelvinTemp - 273.15;
    }
}

1.3. Weather Data Model
public class WeatherData {
    private Main main;
    private long dt;
    private String name;

    // getters and setters

    public static class Main {
        private double temp;
        private double feels_like;

        // getters and setters
    }
}

1.4. Controller for Weather Data

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/weather")
public class WeatherController {

    private final WeatherService weatherService;

    public WeatherController(WeatherService weatherService) {
        this.weatherService = weatherService;
    }

    @GetMapping("/{city}")
    public WeatherData getWeather(@PathVariable String city) {
        WeatherData data = weatherService.getWeather(city);
        data.getMain().setTemp(weatherService.convertToCelsius(data.getMain().getTemp()));
        data.getMain().setFeels_like(weatherService.convertToCelsius(data.getMain().getFeels_like()));
        return data;
    }
}

1.5. Aggregation and Rollups Service

import java.util.List;

@Service
public class WeatherAggregationService {

    public double calculateAverageTemperature(List<Double> temperatures) {
        return temperatures.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
    }

    public double calculateMaxTemperature(List<Double> temperatures) {
        return temperatures.stream().mapToDouble(Double::doubleValue).max().orElse(0.0);
    }

    public double calculateMinTemperature(List<Double> temperatures) {
        return temperatures.stream().mapToDouble(Double::doubleValue).min().orElse(0.0);
    }

    public String getDominantWeatherCondition(List<String> conditions) {
        return conditions.stream()
                .reduce((a, b) -> a.equals(b) ? a : "Variable").orElse("Unknown");
    }
}


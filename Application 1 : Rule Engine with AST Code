Application 1: Rule Engine with AST
1.	Backend (Spring Boot - Java)

1.1. Dependencies in pom.xml (for Maven)

<dependencies>
    <!-- Spring Boot Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    
    <!-- MySQL Driver -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
    
    <!-- Spring Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Lombok -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <optional>true</optional>
    </dependency>
</dependencies>

1.2. Define AST Structure in Java
public class Node {
    private String type;      // Operator or Operand
    private Node left;        // Left child
    private Node right;       // Right child
    private String value;     // Value for operand nodes

    // Constructor for operator nodes
    public Node(String type, Node left, Node right) {
        this.type = type;
        this.left = left;
        this.right = right;
    }

    // Constructor for operand nodes
    public Node(String type, String value) {
        this.type = type;
        this.value = value;
    }

    // Getters and Setters
}

1.3. Rule Service
import org.springframework.stereotype.Service;

@Service
public class RuleEngineService {

    // Convert rule string to AST
    public Node createRule(String ruleString) {
        // Parse the rule string into an AST (simple parser here, can be improved)
        // Example: "age > 30 AND department = 'Sales'"
        Node ageNode = new Node("operand", "age > 30");
        Node deptNode = new Node("operand", "department = 'Sales'");
        Node root = new Node("operator", ageNode, deptNode);
        return root;
    }

    // Combine multiple rules into a single AST
    public Node combineRules(Node[] rules) {
        // Combine rules using AND/OR operators (example combines with AND)
        Node combinedRoot = new Node("operator", rules[0], rules[1]);
        return combinedRoot;
    }

    // Evaluate a rule against provided user data
    public boolean evaluateRule(Node root, Map<String, Object> userData) {
        if (root == null) return false;

        // Evaluate operand
        if (root.getType().equals("operand")) {
            String[] parts = root.getValue().split(" ");
            String field = parts[0];
            String operator = parts[1];
            String value = parts[2];

            // Perform comparison
            if (field.equals("age")) {
                int userAge = (int) userData.get("age");
                int conditionValue = Integer.parseInt(value);
                if (operator.equals(">")) return userAge > conditionValue;
            }
            // Handle more conditions (department, salary, etc.)
        }

        // Evaluate operator
        if (root.getType().equals("operator")) {
            if (root.getValue().equals("AND")) {
                return evaluateRule(root.getLeft(), userData) && evaluateRule(root.getRight(), userData);
            }
            if (root.getValue().equals("OR")) {
                return evaluateRule(root.getLeft(), userData) || evaluateRule(root.getRight(), userData);
            }
        }

        return false;
    }
}
1.4. Controller (REST API)

import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/rules")
public class RuleEngineController {
    private final RuleEngineService ruleEngineService;

    public RuleEngineController(RuleEngineService ruleEngineService) {
        this.ruleEngineService = ruleEngineService;
    }

    @PostMapping("/create")
    public Node createRule(@RequestBody String ruleString) {
        return ruleEngineService.createRule(ruleString);
    }

    @PostMapping("/combine")
    public Node combineRules(@RequestBody Node[] rules) {
        return ruleEngineService.combineRules(rules);
    }

    @PostMapping("/evaluate")
    public boolean evaluateRule(@RequestBody Map<String, Object> userData) {
        // Example AST
        Node ageNode = new Node("operand", "age > 30");
        Node deptNode = new Node("operand", "department = 'Sales'");
        Node root = new Node("operator", ageNode, deptNode);

        return ruleEngineService.evaluateRule(root, userData);
    }
}
1.5. Database Schema (For Rules Storage)
CREATE TABLE rules (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rule_string TEXT,
    ast_structure TEXT -- Can store the AST in JSON format
);
